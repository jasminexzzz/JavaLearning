package com.jasmine.A1_java.high.分布式相关知识;

/**
 * @author : jasmineXz
 */
public class 数据一致性 {
    /**

     例子 :
     用户余额 : 200
     购买物品 : 100

     流程 : 支付 → 订单 → 仓库
     状态 : 初始 → 已支付 → 已出库

     异常情况:
     <情况一> :
     用户支付成功,订单状态却未收到支付成功的消息.
         生成订单　→　发送给支付系统　→　支付成功扣减金额
                                            ↓
         　　　　　　　　　 返回超时  ←　返回订单系统


     <情况二> :
     用户支付成功,下单成功,但却无法发货.
         生成订单　→　发送给支付系统　→　支付成功扣减金额
         　　　　　　　　　　　　　　　　　　　↓
         　　　　　　　　　 订单成功  ←　返回订单系统
         　　　　　　　　　　　↓
         　　　　　　　 发送仓库系统　→　发送失败

     <情况三> :
     支付成功,下单成功,无法发货.
     生成订单　→　发送给支付系统　→　支付成功扣减金额
     　　　　　　　　　　　　　　　　　　　↓
     　　　　　　　　　 订单成功  ←　返回订单系统
     　　　　　　　　　　　↓
     　　　　　　　 发送仓库系统　→　系统返回仓库无货.

     情况一,解决方案:
     1. 先修改订单状态,再扣钱.
        假如在扣钱前,有一笔200的订单成功,则此订单无法支付,但状态却修改完毕,则出现错误.

     2. 订单系统重复提交,直到扣款成功,再修改状态.
        假如在扣钱前,有一笔200的订单成功,则此订单无法支付,永远无法扣款成功.

     3.

     情况二,解决方案 :
     对于某些不需要即时返回的请求,或者说用户不可见的请求,可以使用异步方式,用类似MQ的机制,来重复请求,直到请求成功返回数据.


     情况三,解决方案 :
     1. 用户下单时,就告诉仓库,把货留下来.
        但如秒杀场景,需要对订单设置超时时间,这样下单未支付的订单会自动取消.

     2. 在支付时,先校验仓库是否有货.


     3. 如果无货,则退款.或等待有货时发货.




     */
}
