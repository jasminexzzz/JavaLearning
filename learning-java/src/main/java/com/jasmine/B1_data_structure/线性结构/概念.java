package com.jasmine.B1_data_structure.线性结构;

public class 概念 {

    /**
     1.栈
         遵循先进后出的概念(first-in last-out FILO)
         栈是一种操作限定在表尾部进行的线性表，表尾称为栈顶(Top)，另一端固定不动，称为栈底(Bottom)。进栈、出栈示意图如下：

         入栈──┐   ┌──出栈
               A(n)       ——栈顶 top
               A(n-1)
               ...
               A(2)
               A(1)       ——栈底 bottom

     2.队列
         遵循先进先出的概念(FIFO)
         列与栈类似，仅仅是逻辑有一丢丢不同。队列是一种插入操作限定在表尾其他操作限定在表头的线性表。把进行插入操作的表尾称为队尾
     (Rear),把进行其它操作的头部称为队首(Front)。入队、出队示意图如下：

           入栈──┐
               A(n)       ——队尾 Rear
               A(n-1)
               ...
               A(2)
               A(1)       ——队首 Front
                └──出栈


     3.顺序表(顺序存储)
         按照我们的习惯，存放东西时，一般是找一块空间，然后将需要存放的东西依次摆放，这就是顺序存储。计算机中的顺序存储是指在内存中
     用一块地址连续的空间依次存放数据元素，用这种方式存储的线性表叫顺序表其特点是表中相邻的数据元素在内存中存储位置也相邻，
     如下图：

      0      1     2     3         n-1     n          maxsize-1
     A(1)  A(1)  A(1)  A(1)  ...  A(n-1)  A(n)  ...


     4.链表
         1). 假如我们现在要存放一些物品，但是没有足够大的空间将所有的物品一次性放下(电脑中使用链式存储不是因为内存不够先事先说明一
     下...，具体原因后续会说到)，同时设定我们因为脑容量很小，为了节省空间，只能记住一件物品位置。此时我们很机智的找到了解决方案：
     存放物品时每放置一件物品就在物品上贴一个小纸条，标明下一件物品放在那里，只记住第一件物品的位置，寻找的时候从第一件物品开始寻
     找，通过小纸条我们可以找到所有的物品，这就是链式存储。链表实现的时候不再像线性表一样只存储数据即可，还有下一个数据元素的地址
     ，因此先定义一个节点类(Node)，记录物品信息和下一件物品的位置，我们把物品本身叫做数据域，存储下一件物品地址信息的小纸条称为
     引用域。
             单向链表结构示意图如下：

             头指针         头结点   数据域──┐  ┌──引用域
          ┌─────────┐    ┌────┬────┐    ┌────┬────┐    ┌────┬────┐    ┌────┬────┐    ┌────┬────┐    ┌────┬────┐
          |         | ─> |    |next| ─> | a1 |next| ─> | a2 |next| ─> | a3 |next| ─> | a4 |next| ─> | a5 |next|
          └─────────┘    └────┴────┘    └────┴────┘    └────┴────┘    └────┴────┘    └────┴────┘    └────┴────┘

          (1). 头结点的数据域可以不存储任何信息，也可以存储如线性表长度等类的附加信息，头结点的指针域存储指向第一个结点的指针。
          (2). 单链表可以没有头结点，但不能没有头指针，如果没有头结点则头指针直接指向第一个结点。

         2). 寻找物品的时候发现了一个问题，我们从一件物品找下一件物品的时候很容易，但是如果要找上一件物品就得从头开始找，真的很麻烦。
     为了解决这个问题我们又机智了一把，模仿之前的做法，在存放物品的时候多放置一个小纸条记录上一件物品的位置，这样就可以很快的找
     到上一件物品了。我们把这种方式我们称为双向链表，前面只放置一张小纸条的方式称为单向链表。

            双向链表结构示意图如下：

                                                         ┌─数据域
                 头指针            头结点    引用域──┐    |    ┌──引用域
              ┌─────────┐    ┌─────┬────┬────┐  ┌─────┬────┬────┐  ┌─────┬────┬────┐  ┌─────┬────┬────┐  ┌─────┬────┬────┐
              |         | ─> |prior|    |next|─>|prior| a1 |next|─>|prior| a2 |next|─>|prior| a3 |next|─>|prior| a4 |next|
              └─────────┘    └─────┴────┴────┘  └─────┴────┴────┘  └─────┴────┴────┘  └─────┴────┴────┘  └─────┴────┴────┘

              (3). 顺序表由于元素连续具有随机存储的特点，所以查找数据很方便效率很高，但是插入、删除操作为了确保数据元素连续，需要移动大量
              的数据导致效率很低。
              (4). 而链表由于存储空间不要求连续，插入、删除只需修改相邻元素的引用域地址即可，所以效率很高，但查询需要从头引用开始遍历链表，
          效率很低。

         3). 循环链表
            最后一个指针指向第一个

     */


}
