package com.xzzz.Other.计算机知识;

public class 补码反码 {
    /**
     *

    问题一: 我们都知道一个二进制8位能表示的最大值是 1111 1111 == 255，但为什么最大表示到127？
        因为对于计算机来说，一个二进制的数字它的最高位是符号位，0表示正数，1表示负数。

        例如:
            1111 1111 表示的 -127， 而 0111 1111 表示的是127，范围区间应该是[-127,127]之间

    问题二: 我们都知道一个Byte能表达的数字范围是[-128,127]，那么这个-128是怎么来的呢？
        这里面就涉及到计算机的原码、反码、和补码的相关知识了。

        ----------------------------------------------------------------
        正数：
        原码 == 反码 == 补码
        即：原：0000 0001 ----- 反： 0000 0001 ------ 补：0000 0001
        ----------------------------------------------------------------
        负数：
        反码 == 原码的非符号位取反(后七位取反,实际取系统位数,如64位系统则按63位取反)
        补码 == 反码+1
        即 原： 1000 0001 ------ 反： 1111 1110 ------ 补： 1111 1111
        ----------------------------------------------------------------

        原码、反码、补码都可以表示同一个数字,
        <计算机内部用补码存储一个数>



    问题三:为什么要用补码来存呢？

        这里举一个最简单的例子：
        ----------------------------------------------------------------
        十进制
        1-1 = 1+(-1)
            = 0

        ----------------------------------------------------------------
        二进制原码
        0000 0001 + 1000 0001 = 1000 0010
                              = -2
        结果肯定是不正确的

        ----------------------------------------------------------------
        二进制反码
        0000 0001 + 1111 1110 = 1111 1111
                              = 1000 0000 (原码)
                              = -0
        结果正确,但从数学角度来说一个整数包括负整数，0，正整数.
        而这里出现了 -0 和 0 两个 0 ,这在计算机中就成为了两个值: 1000 0000 和 0000 0000

        ----------------------------------------------------------------
        二进制补码
        0000 0001 + 1111 1111 = 1 0000 0000
                              = 0000 0000 (超过8位的不算在内)
                              = 0000 0000 (原码)
                              = 0


        举例:
        ----------------------------------------------------------------
        十进制
        17 + 15 = 17 + 15
                = 32
        ----------------------------------------------------------------
        二进制原码
        0001 0001 + 0000 1111 = 0010 0000
        ----------------------------------------------------------------
        二进制反码
        0001 0001 + 0000 1111 = 0010 0000
        ----------------------------------------------------------------
        二进制补码
        0001 0001 + 0000 1111 = 0010 0000


        举例:
        ----------------------------------------------------------------
        十进制
        17 - 15 = 17 + (-15)
        = 2
        ----------------------------------------------------------------
        二进制原码
        0001 0001 + 1000 1111 = 1010 0000
                              = 160
        错误
        ----------------------------------------------------------------
        二进制反码
        0001 0001 + 1111 0000 = 1 0000 0001
                              = 0000 0001 (超过8位的不算在内)
                              = 1
        错误
        ----------------------------------------------------------------
        二进制补码
        0001 0001 + 1111 0001 = 1 0000 0010
                              = 0000 0010 (超过8位的不算在内)
                              = 2
        正确



     */
}
