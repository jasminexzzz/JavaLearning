package com.jasmine.设计模式.工厂模式_Factory;

import com.jasmine.设计模式.工厂模式_Factory.工厂方法.例子1.ZTest;

/**
 * @author : jasmineXz
 */
public class 概念 {
    /**
     一. 工厂模式


        1. 简单工厂(静态工厂)模式
            @see com.jasmine.设计模式.工厂模式_Factory.简单工厂.CarFactory

            特点:
            1). 工厂类是一个具体的类，非接口,抽象类。有一个重要的create()方法，利用if或者 switch创建实现并返回。
            2). create()方法通常是静态的，所以也称之为静态工厂。

            缺点:
            1). 扩展性差(我想增加一种汽车，除了新增一个汽车实现类，还需要修改工厂类方法)
            2). 不同的产品需要不同额外参数的时候不支持。

            为了解决他的缺点,又有了多方法静态工厂
            @see com.jasmine.设计模式.工厂模式_Factory.简单工厂.MoreMethodCarFactory

            虽然解决了上述问题,但每次增加产品,我们都需要工厂类来增加静态方法,有时候我们希望不修改原有代码,只做拓展,就有了工厂方法模式

        2. 工厂方法(普通工厂)模式
            @see ZTest

            特点:
            1). 不仅仅产品要抽象， 工厂也要抽象。
            2). 工厂方法使一个产品类的实例化延迟到其具体工厂子类.
            3). 工厂方法的好处就是更拥抱变化。当需求变化，只需要增删相应的类，不需要修改已有的类。
            4). 而简单工厂需要修改工厂类的create()方法，多方法静态工厂模式需要增加一个静态方法。

            缺点:
            1). 引入抽象工厂层后，每次新增一个具体产品类，也要同时新增一个具体工厂类，所以又有了多方法静态工厂。




     */
}
